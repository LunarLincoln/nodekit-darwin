lane :test do
 match(type: "development", readonly:"true")
   
 scan(
      scheme: "#{ENV['SCHEME_NAME']}-Mac",
      clean: true
    )
 
  scan(
      scheme: "#{ENV['SCHEME_NAME']}-iOS",
      clean: true
    )

end

lane :build do
    sh "cd .. && carthage build --no-skip-current" 
    sh "cd .. && carthage archive #{ENV['FRAMEWORK_NAME']}"
end

lane :release_github do
  ENV["FL_GITHUB_RELEASE_API_TOKEN"] = ENV["GITHUB_TOKEN"]
  
  commit_desc = sh("git log --format=%B -n 1 #{ENV['CIRCLE_SHA1']}").strip
  
  if (commit_desc =~ /v[0-9]+(\.[0-9]+)*/)
    set_github_release(
        commitish: "#{ENV['CIRCLE_BRANCH']}",
        repository_name: "#{ENV['CIRCLE_PROJECT_USERNAME']}/#{ENV['CIRCLE_PROJECT_REPONAME']}",
        name: "#{ENV['CIRCLE_PROJECT_REPONAME']}-#{commit_desc}",
        tag_name: commit_desc,
        description: commit_desc,
        upload_assets: ["./#{ENV['FRAMEWORK_NAME']}.Framework.zip"],
        is_draft: false,
        is_prerelease: true
    )
  end
  
end